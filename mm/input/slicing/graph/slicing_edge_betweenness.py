'''
Provides the interface for the a algorithm to detect communities based on
the betweenness of the edges in the graph.

To use this algorithm, in the .yaml configuration write the name of this module.
(slicing: type: slicing_edge_betweenness)

The edge_betweenness algorithm is sensible to weighted edges. These weights
are generated by classes in the weight package. The specific
weighting scheme can be configured in "slicing: weight_calculator:"
attribute of the yaml configuration file. 

@author: Mota
'''

import mm.input.slicing.graph.slicing_graph_based as slicing_graph_based
from mm.input.slicing.graph.weight.factory import factory
from wrapper.iGraphWrapper import iGraphWrapper
import os

class SlicingEdgeBetweeness(slicing_graph_based.SlicingGraphBased):
    def __init__(self, legacy_helper_config_dict):
        super(SlicingEdgeBetweeness, self).__init__(legacy_helper_config_dict)
        self.igraphWrapper = iGraphWrapper(self)
        self.g = self.igraphWrapper.createGraph()
        self.weightcalc = factory(legacy_helper_config_dict, self.igraphWrapper)
        self.weightcalc.calculateWeights()
        self.wc_des = legacy_helper_config_dict['weight_calculator']
        
    def edge_betweenness(self):
        vertexCluster = self.g.community_edge_betweenness(weights="weight").as_clustering()
        return self.igraphWrapper.getCommunities(vertexCluster)
    
    def run(self):
        communities = self.edge_betweenness()
        directory = 'slicing_results/edge_betweenness/'
        if not os.path.exists(directory):
            os.makedirs(directory)
        self.print_communities(communities, directory + self.wc_des + ".txt")
        return communities
    
def construct(config):
    return SlicingEdgeBetweeness(config)  
