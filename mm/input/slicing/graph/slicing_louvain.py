'''
Provides the interface for the specific Louvain algorithm
to be used for word community detection.

To use this algorithm, in the .yaml configuration write the name of this module.
(slicing: type: slicing_louvain)

The Louvain algorithm is sensible to weighted edges. These weights
are generated by classes in the weight package. The specific
weighting scheme can be configured in "slicing: weight_calculator:"
attribute of the yaml configuration file. 

@author: Mota
'''
import mm.input.slicing.graph.slicing_graph_based as slicing_graph_based
import louvain
from mm.input.slicing.graph.weight.factory import factory
from wrapper.iGraphWrapper import iGraphWrapper
import os

class SlicingLouvain(slicing_graph_based.SlicingGraphBased):
    def __init__(self, slicer_configs):
        super(SlicingLouvain, self).__init__(slicer_configs)
        self.igraphWrapper = iGraphWrapper(self)
        self.g = self.igraphWrapper.createGraph()
        self.weightcalc = factory(slicer_configs, self.igraphWrapper)
        self.weightcalc.calculateWeights()
        self.wc_des = slicer_configs["graph_community"]['weight_calculator']
        self.debugDir = 'resources/slicing_results/louvain/'
        self.debugFile = self.debugDir + self.wc_des + ".txt"
        self.desc = "louvain" + " weight: " + self.wc_des + " " + self.desc
        
    def louvain(self):
        vertexCluster = louvain.find_partition(self.g, method='Modularity', weight='weight', initial_membership=range(self.g.vcount()));
        return self.igraphWrapper.getCommunities(vertexCluster)
    
    def run(self):
        communities = self.louvain()
        if not os.path.exists(self.debugDir):
            os.makedirs(self.debugDir)
        self.print_communities(communities, self.debugFile + self.wc_des + ".txt")
        return communities
    
def construct(config):
    return SlicingLouvain(config)  
