'''
Provides the interface for the a fast greedy algorithm to optimize modularity
to be used for word community detection.

To use this algorithm, in the .yaml configuration write the name of this module.
(slicing: type: slicing_fastgreedy)

The FastGreedy algorithm is sensible to weighted edges. These weights
are generated by classes in the weight package. The specific
weighting scheme can be configured in "slicing: weight_calculator:"
attribute of the yaml configuration file. 

@author: Mota
'''

import mm.input.slicing.graph.slicing_graph_based as slicing_graph_based
from mm.input.slicing.graph.weight.factory import factory
from wrapper.iGraphWrapper import iGraphWrapper
import os

class SlicingFastGreedy(slicing_graph_based.SlicingGraphBased):
    def __init__(self, slicer_configs):
        super(SlicingFastGreedy, self).__init__(slicer_configs)
        self.igraphWrapper = iGraphWrapper(self)
        self.g = self.igraphWrapper.createGraph()
        self.weightcalc = factory(slicer_configs, self.igraphWrapper)
        self.weightcalc.calculateWeights()
        self.wc_des = slicer_configs["graph_community"]['weight_calculator']
        self.debugDir = 'resources/slicing_results/fastgreedy/'
        self.debugFile = self.debugDir + self.wc_des + ".txt"
        
    def fast_greedy(self):
        vertexCluster = self.g.community_fastgreedy(weights="weight").as_clustering()
        #self.plotGraph(self.g, vertexCluster.membership, self.igraphWrapper.node_to_token_dic, "graph_plots/co-occurrence_"+self.wc_des+".png")
        return self.igraphWrapper.getCommunities(vertexCluster)
    
    def run(self):
        communities = self.fast_greedy()
        if not os.path.exists(self.debugDir):
            os.makedirs(self.debugDir)
        self.print_communities(communities, self.debugFile)
        return communities
    
def construct(config):
    return SlicingFastGreedy(config)  
