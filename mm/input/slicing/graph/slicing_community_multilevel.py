'''
Provides the interface for the multilevel algorithm of Blondel et al.
to be used for word community detection.

To use this algorithm, in the .yaml configuration write the name of this module.
(slicing: type: slicing_multilevel)

The MultiLevel algorithm is sensible to weighted edges. These weights
are generated by classes in the weight package. The specific
weighting scheme can be configured in "slicing: weight_calculator:"
attribute of the yaml configuration file. 

@author: Mota
'''

import mm.input.slicing.graph.slicing_graph_based as slicing_graph_based
from mm.input.slicing.graph.weight.factory import factory
from wrapper.iGraphWrapper import iGraphWrapper
import os

class SlicingCommunityMultilevel(slicing_graph_based.SlicingGraphBased):
    def __init__(self, slicer_configs):
        super(SlicingCommunityMultilevel, self).__init__(slicer_configs)
        self.igraphWrapper = iGraphWrapper(self)
        self.g = self.igraphWrapper.createGraph()
        self.weightcalc = factory(slicer_configs, self.igraphWrapper)
        self.weightcalc.calculateWeights()
        self.wc_des = slicer_configs['weight_calculator']
        
    def community_multilevel(self):
        vertexCluster = self.g.community_multilevel(weights="weight")
        return self.igraphWrapper.getCommunities(vertexCluster)
    
    def run(self):
        communities = self.community_multilevel()
        directory = 'slicing_results/multilevel/'
        if not os.path.exists(directory):
            os.makedirs(directory)
        self.print_communities(communities, directory + self.wc_des + ".txt")
        return communities
    
def construct(config):
    return SlicingCommunityMultilevel(config)  
